{"version":3,"sources":["components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","this","props","auth","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","renderContent","Component","connect","_ref","App","BrowserRouter","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAEMA,0LAEE,OAAQC,KAAKC,MAAMC,MACf,KAAK,KACD,OACJ,KAAK,EACD,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gBAAR,sBAGZ,QACI,MAAM,CACNJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gBAAR,iBAEJJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,YAAR,eAEJJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAR,+CAOtB,OACCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,YACAJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpLV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BQ,GAAG,0BAC3CX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,QAAsCJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,eAE1CH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,iBAA7B,WAEWJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACzBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,2BAA7B,qBAEPJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACPH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,eAA7B,UAGQP,KAAKe,yBAjDLC,aA6DNC,kBALf,SAAAC,GAEI,MAAO,CAAChB,KAFoBgB,EAANhB,OAKXe,CAAyBlB,GChCzBoB,mLArBX,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACHjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAACgB,EAAD,eALcL,aCIEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e8917461.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nclass Header extends Component{\n    renderContent() {\n        switch (this.props.auth) {\n            case null:\n                return;\n            case false:\n                return(\n                    <button className=\"btn btn-dark my-2 my-sm-0\">\n                        <a href=\"/auth/google\">Login With Google</a>\n                    </button>\n                );\n            default:\n                return[\n                <div>\n                    <button className=\"btn btn-dark my-2 my-sm-0\">\n                        <a href=\"/fantasyTeam\">Fantasy Team</a>\n                    </button>\n                    <button className=\"btn btn-dark my-2 my-sm-0\">\n                        <a href=\"/profile\">My Profile</a>\n                    </button>\n                    <button className=\"btn btn-dark my-2 my-sm-0\">\n                        <a href=\"/api/logout\">Logout</a>\n                    </button>\n                </div>\n                ];\n        }\n    }\n\trender(){\n\t\treturn(\n\t\t\t<nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  \t\t\t\t<a className=\"navbar-brand\" href=\"/\">Database</a>\n  \t\t\t\t<button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t\t\t    <span className=\"navbar-toggler-icon\"></span>\n\t\t\t  \t</button>\n  \t\t\t\t<div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\t\t\t\t    <ul className=\"navbar-nav mr-auto\">\n    \t\t\t\t\t<li className=\"nav-item active\">\n    \t\t\t\t\t    <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n    \t\t\t\t\t</li>\n    \t\t\t\t\t<li className=\"nav-item\">\n        \t\t\t\t\t<a className=\"nav-link\" href=\"/player/index\">Player</a>\n    \t\t\t\t \t</li>\n                        <li className=\"nav-item\">\n        \t\t\t\t\t<a className=\"nav-link\" href=\"/player/commonTeammates\">Common Teammates</a>\n    \t\t\t\t \t</li>\n\t\t\t\t\t\t<li className=\"nav-item\">\n        \t\t\t\t\t<a className=\"nav-link\" href=\"/team/index\">Team</a>\n    \t\t\t\t \t</li>\n    \t\t\t\t</ul>\n                    {this.renderContent()}\n  \t\t\t\t</div>\n\t\t\t</nav>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps({auth}){\n    //get auth state out of all the states\n    return {auth};\n}\n\nexport default connect(mapStateToProps)(Header);\n\n","import React, { Component } from 'react';\nimport '../Styles/App.css';\n\nimport { BrowserRouter, Route , Switch} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport Header from './Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n\t\t\t<div className=\"container\">\n\t\t\t\t<Header />\n\t\t\t\t\n\t\t\t\t{/* <Switch>\n\t\t\t\t\t<Route path = \"/trivial/detail\" component = {TrivialDetail} />\n\t\t\t\t\t<Route exact path = \"/player/commonTeammates\" component={PlayerCommon} />\n\t\t\t\t\t<Route path = \"/player/index\" component={PlayerIndex} />\n\t\t\t\t\t<Route path = \"/team/index\" component={TeamIndex} />\n\t\t\t\t\t<Route exact path=\"/\" component={Landing} />\n\t\t\t\t\t<Route exact path=\"/SearchResult\" component={SearchResult} />\n\t\t\t\t\t<Route exact path=\"/profile\" component={Profile} />\n\t\t\t\t\t<Route path=\"/fantasyTeam\" component={FantasyTeam} />\n\t\t\t\t</Switch> */}\n\t\t\t</div>\n\t\t\t</BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n// export default connect(null, actions)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}